name: OpenShift

env:
  OPENSHIFT_SERVER: ${{ secrets.OPENSHIFT_SERVER }}
  OPENSHIFT_TOKEN: ${{ secrets.OPENSHIFT_TOKEN }}
  OPENSHIFT_NAMESPACE: ""
  APP_NAME: "moneyout"
  APP_PORT: "8080"
  IMAGE_REGISTRY: docker.io/omidiyanto
  IMAGE_REGISTRY_USER: omidiyanto
  IMAGE_REGISTRY_PASSWORD: ${{ secrets.DOCKERHUB_PASSWORD }}
  IMAGE_TAGS: "latest"

on:
  workflow_dispatch:
  push:
    branches: [ "master" ]

jobs:
  checkout:
    name: Checkout Repository
    runs-on: ubuntu-latest
    steps:
      - name: Check out repository
        uses: actions/checkout@v4

      - name: Check location 
        run: |
          pwd
          ls -la

  build:
    name: Build Docker Image
    runs-on: ubuntu-latest
    needs: checkout
    steps:
      - name: Check out repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Log in to Dockerhub Registry
        run: echo "${{ env.IMAGE_REGISTRY_PASSWORD }}" | docker login docker.io -u ${{ env.IMAGE_REGISTRY_USER }} --password-stdin

      - name: Build Docker image
        run: |
          pwd 
          ls -l
          docker build -t ${{ env.IMAGE_REGISTRY }}/${{ env.APP_NAME }}:${{ env.IMAGE_TAGS }} .

  push:
    name: Push Docker Image
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Check out repository
        uses: actions/checkout@v4

      - name: Push to Docker Hub
        run: docker push ${{ env.IMAGE_REGISTRY }}/${{ env.APP_NAME }}:${{ env.IMAGE_TAGS }}

  deploy:
    name: Deploy to OpenShift
    runs-on: ubuntu-latest
    needs: push
    steps:
      - name: Check out repository
        uses: actions/checkout@v4

      - name: Log in to OpenShift
        uses: redhat-actions/oc-login@v1
        with:
          openshift_server_url: ${{ env.OPENSHIFT_SERVER }}
          openshift_token: ${{ env.OPENSHIFT_TOKEN }}
          insecure_skip_tls_verify: true
          namespace: ${{ env.OPENSHIFT_NAMESPACE }}

      - name: Remove old deployment and Create new one
        run: |
          if oc get deployment ${{ env.APP_NAME }} >/dev/null 2>&1; then
            echo "Deployment ${{ env.APP_NAME }} exists. Deleting..."
            oc delete deployment ${{ env.APP_NAME }}
          else
            echo "Deployment ${{ env.APP_NAME }} does not exist. Skipping deletion."
          fi
          echo "Creating new deployment..."
          oc create deployment ${{ env.APP_NAME }} --image=${{ env.IMAGE_REGISTRY }}/${{ env.APP_NAME }}:${{ env.IMAGE_TAGS }}

  service:
    name: Expose Service
    runs-on: ubuntu-latest
    needs: deploy
    steps:
      - name: Check out repository
        uses: actions/checkout@v4

      - name: Log in to OpenShift
        uses: redhat-actions/oc-login@v1
        with:
          openshift_server_url: ${{ env.OPENSHIFT_SERVER }}
          openshift_token: ${{ env.OPENSHIFT_TOKEN }}
          insecure_skip_tls_verify: true
          namespace: ${{ env.OPENSHIFT_NAMESPACE }}

      - name: Create Service to Expose defined port
        run: |
          if oc get service ${{ env.APP_NAME }} >/dev/null 2>&1; then
            echo "Service ${{ env.APP_NAME }} exists. Skipping..."
          else
            echo "Service ${{ env.APP_NAME }} does not exist."
            echo "Creating new Service..."
            oc expose deployment ${{ env.APP_NAME }} --port=${{ env.APP_PORT }}

  route:
    name: Create Route
    runs-on: ubuntu-latest
    needs: service
    steps:
      - name: Check out repository
        uses: actions/checkout@v4

      - name: Log in to OpenShift
        uses: redhat-actions/oc-login@v1
        with:
          openshift_server_url: ${{ env.OPENSHIFT_SERVER }}
          openshift_token: ${{ env.OPENSHIFT_TOKEN }}
          insecure_skip_tls_verify: true
          namespace: ${{ env.OPENSHIFT_NAMESPACE }}

      - name: Create Route for Public Access
        run: |
          if oc get route ${{ env.APP_NAME }} >/dev/null 2>&1; then
            echo "Route ${{ env.APP_NAME }} exists. Skipping..."
          else
            echo "Route ${{ env.APP_NAME }} does not exist."
            echo "Creating new Route..."
            oc create route edge --service=${{ env.APP_NAME }} --insecure-policy=Redirect

      - name: Print application URL
        run: |
          echo
          echo "======================== Your application is available at: ========================"
          echo $(oc get route ${{ env.APP_NAME }} -o jsonpath='{.spec.host}')
          echo "==================================================================================="
          echo
